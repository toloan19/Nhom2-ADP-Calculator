import java.awt.*;                      // Import th∆∞ vi·ªán AWT cho c√°c th√†nh ph·∫ßn giao di·ªán
import java.awt.event.*;                // Import th∆∞ vi·ªán x·ª≠ l√Ω s·ª± ki·ªán (b√†n ph√≠m, chu·ªôt)
import javax.swing.*;                   // Import th∆∞ vi·ªán Swing ƒë·ªÉ x√¢y d·ª±ng giao di·ªán
import javax.swing.border.EmptyBorder;  // Import EmptyBorder ƒë·ªÉ t·∫°o kho·∫£ng tr·ªëng xung quanh th√†nh ph·∫ßn
import javax.swing.text.DefaultCaret;   // Import DefaultCaret ƒë·ªÉ t√πy ch·ªânh con tr·ªè nh·∫•p nh√°y
import java.io.*; // Th√™m import cho thao t√°c file

public class MySimpleCalculator {

    // Khai b√°o c√°c th√†nh ph·∫ßn giao di·ªán ng∆∞·ªùi d√πng
    private JFrame mainFrame;                 // C·ª≠a s·ªï ch√≠nh c·ªßa ·ª©ng d·ª•ng
    private JTextField displayField;          // Tr∆∞·ªùng vƒÉn b·∫£n hi·ªÉn th·ªã bi·ªÉu th·ª©c v√† k·∫øt qu·∫£
    private DefaultListModel<String> historyModel; // Model l∆∞u tr·ªØ l·ªãch s·ª≠ t√≠nh to√°n
    private JList<String> historyList;        // Danh s√°ch hi·ªÉn th·ªã l·ªãch s·ª≠ t√≠nh to√°n
    private boolean calculationDone = false;  // C·ªù ƒë√°nh d·∫•u ph√©p t√≠nh v·ª´a ƒë∆∞·ª£c th·ª±c hi·ªán xong
    private java.util.List<String> fullHistory = new java.util.ArrayList<>();
    private boolean isDegreeMode = true;

    /**
     * Constructor: Kh·ªüi t·∫°o m√°y t√≠nh b·∫±ng c√°ch thi·∫øt l·∫≠p giao di·ªán v√† ph√≠m t·∫Øt.
     */
    public MySimpleCalculator() {
        setupUI();          // Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng
        setupKeyBindings(); // Thi·∫øt l·∫≠p ph√≠m t·∫Øt b√†n ph√≠m
    }

    /**
     * Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng. T·∫°o khung ch√≠nh, v√πng hi·ªÉn th·ªã, b·∫£ng n√∫t,
     * v√† b·∫£ng l·ªãch s·ª≠.
     */
    private void setupUI() {
        // === T·∫°o khung ch√≠nh ===
        mainFrame = new JFrame("My Simple Calculator");
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainFrame.setSize(600, 600); // ƒê·∫∑t k√≠ch th∆∞·ªõc c·ª≠a s·ªï
        mainFrame.setLayout(new BorderLayout(10, 10)); // S·ª≠ d·ª•ng BorderLayout v·ªõi kho·∫£ng c√°ch 10 pixel

        // === T·∫°o tr∆∞·ªùng hi·ªÉn th·ªã ===
        displayField = new JTextField("0");
        displayField.setFont(new Font("Arial", Font.BOLD, 32));
        displayField.setHorizontalAlignment(JTextField.RIGHT);
        displayField.setEditable(true);

        // S·ª≠a l·ªói c√∫ ph√°p trong vi·ªác thi·∫øt l·∫≠p DefaultCaret
        DefaultCaret caret = new DefaultCaret();
        caret.setBlinkRate(500); // T·ªëc ƒë·ªô nh·∫•p nh√°y 500ms
        displayField.setCaret(caret);

        displayField.setBackground(new Color(225, 250, 255));
        displayField.setForeground(Color.BLACK);          // ƒê·∫∑t m√†u ch·ªØ ƒëen
        // ƒê·∫∑t vi·ªÅn k√©p v·ªõi ƒë∆∞·ªùng m√†u v√† padding
        displayField.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(180, 200, 220), 3),
                BorderFactory.createEmptyBorder(15, 15, 15, 15)
        ));
        JPanel displayPanel = new JPanel(new BorderLayout());
        displayPanel.add(displayField, BorderLayout.CENTER);

        // === T·∫°o b·∫£ng n√∫t ===
        JPanel buttonPanel = new JPanel(new GridLayout(7, 5, 5, 5));
        // M·∫£ng nh√£n n√∫t (s·ªë, to√°n t·ª≠ v√† ch·ª©c nƒÉng ƒë·∫∑c bi·ªát)
        String[] buttonLabels = {
            	"C", "CE", "B","(", ")",
            	"7", "8", "9","+","-",  
            	"4", "5", "6", "*", "/", 
            	"1", "2", "3", ".", "(-)",
            	"0", "‚àö", "%", "x^y","n!",
            	"sin", "cos", "tan", "cot", 
            	"ln", "log", "Deg‚ÜîRad",	"‚Üí", "‚Üê", "=",
            };
        // V√≤ng l·∫∑p qua m·ªói nh√£n, t·∫°o n√∫t v√† th√™m v√†o b·∫£ng
        for (String label : buttonLabels) {
            if (label.isEmpty()) {
                buttonPanel.add(new JLabel());
            } else {
                buttonPanel.add(createButton(label));
            }
        }

        // === T·∫°o b·∫£ng l·ªãch s·ª≠ ===
        historyModel = new DefaultListModel<>();          // T·∫°o model cho l·ªãch s·ª≠
        historyList = new JList<>(historyModel);            // T·∫°o danh s√°ch hi·ªÉn th·ªã l·ªãch s·ª≠
        historyList.setFont(new Font("Arial", Font.PLAIN, 14));
        historyList.setCellRenderer(new HistoryCellRenderer()); // G√°n renderer m·ªõi
        JScrollPane historyScrollPane = new JScrollPane(historyList); // ƒê·∫∑t danh s√°ch trong thanh cu·ªôn
        historyScrollPane.setPreferredSize(new Dimension(200, 0));    // ƒê·∫∑t chi·ªÅu r·ªông ∆∞u ti√™n
        JPanel historyPanel = new JPanel(new BorderLayout());
        historyPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        JLabel historyLabel = new JLabel("Calculation History");
        historyLabel.setFont(new Font("Tahoma", Font.BOLD, 16));
        historyPanel.add(historyLabel, BorderLayout.NORTH);
        historyPanel.add(historyScrollPane, BorderLayout.CENTER);

        // Th√™m √¥ t√¨m ki·∫øm v√† n√∫t search
        JPanel searchPanel = new JPanel(new BorderLayout(5, 0));
        JTextField searchField = new JTextField();
        JButton searchButton = new JButton("üîç"); // C√≥ th·ªÉ thay b·∫±ng icon n·∫øu mu·ªën
        JButton resetButton = new JButton("Reset");
        searchPanel.add(resetButton, BorderLayout.WEST);
        searchPanel.add(searchField, BorderLayout.CENTER);
        searchPanel.add(searchButton, BorderLayout.EAST);
        historyPanel.add(searchPanel, BorderLayout.SOUTH);

        // === Th√™m t·∫•t c·∫£ c√°c b·∫£ng v√†o khung ch√≠nh ===
        mainFrame.add(displayPanel, BorderLayout.NORTH);
        mainFrame.add(buttonPanel, BorderLayout.CENTER);
        mainFrame.add(historyPanel, BorderLayout.EAST);

        mainFrame.setVisible(true); // Hi·ªÉn th·ªã khung ch√≠nh

        // B·∫Øt s·ª± ki·ªán click v√†o n√∫t X
        historyList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int index = historyList.locationToIndex(e.getPoint());
                if (index != -1) {
                    Rectangle cellBounds = historyList.getCellBounds(index, index);
                    int xInCell = e.getX() - cellBounds.x;
                    int width = cellBounds.width;
                    // Gi·∫£ s·ª≠ n√∫t X n·∫±m ·ªü b√™n ph·∫£i, r·ªông 40px
                    if (xInCell > width - 40) {
                        historyModel.remove(index);
                        fullHistory.remove(index);
                    }
                }
            }
        });

        // S·ª± ki·ªán t√¨m ki·∫øm
        searchButton.addActionListener(e -> {
            String keyword = searchField.getText().trim().toLowerCase();
            historyModel.clear();
            for (String s : fullHistory) {
                if (s.toLowerCase().contains(keyword)) {
                    historyModel.addElement(s);
                }
            }
        });

        // S·ª± ki·ªán reset (hi·ªán l·∫°i to√†n b·ªô l·ªãch s·ª≠)
        resetButton.addActionListener(e -> {
            searchField.setText("");
            historyModel.clear();
            for (String s : fullHistory) {
                historyModel.addElement(s);
            }
        });
    }

    /**
     * T·∫°o m·ªôt JButton v·ªõi nh√£n ch·ªâ ƒë·ªãnh. ƒê·∫∑t font, m√†u n·ªÅn v√† ƒëƒÉng k√Ω ng∆∞·ªùi
     * l·∫Øng nghe s·ª± ki·ªán.
     *
     * @param label VƒÉn b·∫£n hi·ªÉn th·ªã tr√™n n√∫t
     * @return ƒê·ªëi t∆∞·ª£ng JButton ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh
     */
    private JButton createButton(String label) {
        JButton button = new JButton(label);         // T·∫°o n√∫t m·ªõi v·ªõi nh√£n ƒë√£ cho
        button.setFont(new Font("Tahoma", Font.BOLD, 16)); // ƒê·∫∑t font cho n√∫t
        button.setFocusPainted(false);                 // T·∫Øt hi·ªÉn th·ªã focus
        button.setPreferredSize(new Dimension(60, 60));
        button.setBackground(new Color(230, 230, 230));  // ƒê·∫∑t m√†u n·ªÅn x√°m nh·∫°t
        button.setBorder(BorderFactory.createLineBorder(new Color(180, 180, 180)));

        // ƒê·∫∑t m√†u ƒë·∫∑c bi·ªát cho c√°c n√∫t ch·ª©c nƒÉng
        if (label.equals("C") || label.equals("B") || label.equals("CE")
                || label.equals("‚Üê") || label.equals("‚Üí")) {
            button.setBackground(new Color(255, 160, 122)); // M√†u cam nh·∫°t cho c√°c n√∫t ch·ª©c nƒÉng
        } else {
            button.setBackground(new Color(230, 230, 230)); // M√†u x√°m nh·∫°t cho c√°c n√∫t s·ªë
        }

        // ƒêƒÉng k√Ω ng∆∞·ªùi l·∫Øng nghe s·ª± ki·ªán ƒë·ªÉ x·ª≠ l√Ω khi nh·∫•p n√∫t
        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                handleButtonEvent(label);            // X·ª≠ l√Ω s·ª± ki·ªán d·ª±a tr√™n nh√£n n√∫t
            }
        });
        return button;                                 // Tr·∫£ v·ªÅ n√∫t ƒë√£ t·∫°o
    }
    
    private void toggleAngleMode() {
        isDegreeMode = !isDegreeMode;
        JOptionPane.showMessageDialog(mainFrame, "Ch·∫ø ƒë·ªô g√≥c: " + (isDegreeMode ? "ƒê·ªô" : "Radian"));
    }

    /**
     * X·ª≠ l√Ω s·ª± ki·ªán nh·∫•p n√∫t. ƒê·ªëi v·ªõi n√∫t "(-)", ƒë·∫£o d·∫•u c·ªßa gi√° tr·ªã hi·ªán t·∫°i.
     * N·∫øu m√†n h√¨nh ƒëang hi·ªÉn th·ªã "0" ho·∫∑c tr·ªëng, nh·∫•n "(-)" s·∫Ω ch√®n "-" ƒë·ªÉ
     * ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p s·ªë √¢m.
     *
     * @param label Nh√£n c·ªßa n√∫t ƒë√£ ƒë∆∞·ª£c nh·∫•n
     */
    private void handleButtonEvent(String label) {
        // N·∫øu m·ªôt ph√©p t√≠nh v·ª´a ƒë∆∞·ª£c th·ª±c hi·ªán v√† ng∆∞·ªùi d√πng nh·∫•n m·ªôt ch·ªØ s·ªë, x√≥a m√†n h√¨nh ƒë·ªÉ nh·∫≠p m·ªõi
        if (calculationDone && Character.isDigit(label.charAt(0))) {
            displayField.setText("");
            calculationDone = false;
        }

        // X·ª≠ l√Ω n√∫t d·ª±a tr√™n nh√£n c·ªßa n√≥
        if (label.equals("C")) {
            displayField.setText("0");
        } else if (label.equals("CE")) {
            clearEntry();
        } else if (label.equals("B")) {
            deleteLastChar();
        } else if (label.equals("‚Üê")) {
            moveCaretLeft();                        // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c m·ªõi
        } else if (label.equals("‚Üí")) {
            moveCursorForward();
        } else if (label.equals("=")) {
            performCalculation();
        } else if (label.equals("(-)")) {
            // H√†nh vi c·∫≠p nh·∫≠t: n·∫øu m√†n h√¨nh ƒëang hi·ªÉn th·ªã "0" ho·∫∑c tr·ªëng, ch√®n "-" ƒë·ªÉ cho ph√©p nh·∫≠p s·ªë √¢m
            String currentText = displayField.getText();
            if (currentText.equals("0") || currentText.isEmpty()) {
                displayField.setText("-");
            } else {
                // N·∫øu kh√¥ng, ƒë·∫£o d·∫•u c·ªßa s·ªë hi·ªán t·∫°i
                if (currentText.startsWith("-")) {
                    displayField.setText(currentText.substring(1));
                } else {
                    displayField.setText("-" + currentText);
                }
            }
        } else if (label.equals("‚àö")) {
            appendToDisplay("‚àö");                    // Th√™m k√Ω hi·ªáu cƒÉn b·∫≠c hai
        } else if (label.equals("x^y")) {
            appendToDisplay("^");                    // Th√™m k√Ω hi·ªáu l≈©y th·ª´a
        } else if (label.equals("sin") || label.equals("cos") || label.equals("tan") || label.equals("cot") || label.equals("ln") || label.equals("log")) {
            appendToDisplay(label + "(");  // Th√™m d·∫•u "(" cho c√°c h√†m l∆∞·ª£ng gi√°c v√† logarit
        } else if (label.equals("n!")) {
            appendToDisplay("!");  // Th√™m d·∫•u "!" cho ph√©p t√≠nh giai th·ª´a
        } else if (label.equals("Deg‚ÜîRad")) {
            toggleAngleMode();  // Chuy·ªÉn ƒë·ªïi gi·ªØa ƒë·ªô v√† radian
        }  else {
            appendToDisplay(label);  // Th√™m c√°c nh√£n c·ªßa c√°c n√∫t kh√°c v√†o m√†n h√¨nh
        }
    }

    /**
     * Thi·∫øt l·∫≠p ph√≠m t·∫Øt s·ª≠ d·ª•ng KeyboardFocusManager. C·∫≠p nh·∫≠t ƒë·ªÉ h·ªó tr·ª£ c√°c
     * ph√≠m m≈©i t√™n.
     */
    private void setupKeyBindings() {
        KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(new KeyEventDispatcher() {
            public boolean dispatchKeyEvent(KeyEvent e) {
                // Ch·ªâ x·ª≠ l√Ω c√°c s·ª± ki·ªán khi c·ª≠a s·ªï m√°y t√≠nh ƒëang ƒë∆∞·ª£c focus
                if (!mainFrame.isFocused() && !displayField.hasFocus()) {
                    return false;
                }

                // X·ª≠ l√Ω s·ª± ki·ªán g√µ ph√≠m
                if (e.getID() == KeyEvent.KEY_TYPED) {
                    char c = e.getKeyChar();         // L·∫•y k√Ω t·ª± ƒë√£ g√µ
                    // N·∫øu k√Ω t·ª± l√† m·ªôt ch·ªØ s·ªë ho·∫∑c to√°n t·ª≠ h·ª£p l·ªá, th√™m v√†o m√†n h√¨nh
                    if (Character.isDigit(c) || "+-*/().^%".indexOf(c) != -1) {
                        appendToDisplay(String.valueOf(c));
                        return true;
                    } else if (c == '\n') {          // N·∫øu Enter ƒë∆∞·ª£c nh·∫•n
                        performCalculation();        // T√≠nh to√°n bi·ªÉu th·ª©c
                        return true;
                    }
                } else if (e.getID() == KeyEvent.KEY_PRESSED) {
                    switch (e.getKeyCode()) {
                        case KeyEvent.VK_BACK_SPACE:
                            deleteLastChar();
                            return true;
                        case KeyEvent.VK_LEFT:
                            moveCaretLeft();
                            return true;
                        case KeyEvent.VK_RIGHT:
                            moveCursorForward();
                            return true;
                    }
                }

                return false; // V·ªõi c√°c ph√≠m kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω, tr·∫£ v·ªÅ false
            }
        });
    }

    /**
     * Th√™m vƒÉn b·∫£n ƒë√£ cho v√†o tr∆∞·ªùng hi·ªÉn th·ªã, xem x√©t v·ªã tr√≠ con tr·ªè.
     *
     * @param text VƒÉn b·∫£n ƒë·ªÉ th√™m
     */
    private void appendToDisplay(String text) {
        // N·∫øu m·ªôt ph√©p t√≠nh v·ª´a ƒë∆∞·ª£c th·ª±c hi·ªán, x√≥a m√†n h√¨nh tr∆∞·ªõc
        if (calculationDone) {
            displayField.setText("");
            calculationDone = false;
        }

        int cursorPos = displayField.getCaretPosition();
        String currentText = displayField.getText();

        // ƒê·∫£m b·∫£o cursorPos kh√¥ng v∆∞·ª£t qu√° ƒë·ªô d√†i chu·ªói
        cursorPos = Math.min(cursorPos, currentText.length());

        if (currentText.equals("0")) {
            displayField.setText(text);
            displayField.setCaretPosition(text.length());
        } else {
            // Ch√®n text t·∫°i v·ªã tr√≠ con tr·ªè thay v√¨ lu√¥n th√™m v√†o cu·ªëi
            String newText = currentText.substring(0, cursorPos) + text + currentText.substring(cursorPos);
            displayField.setText(newText);
            displayField.setCaretPosition(cursorPos + text.length());
        }

        // ƒê·∫£m b·∫£o con tr·ªè hi·ªÉn th·ªã v√† c√≥ focus
        displayField.getCaret().setVisible(true);
        SwingUtilities.invokeLater(() -> {
            displayField.requestFocusInWindow();
        });
    }

    /**
     * X√≥a k√Ω t·ª± cu·ªëi c√πng kh·ªèi tr∆∞·ªùng hi·ªÉn th·ªã. ƒê√£ c·∫≠p nh·∫≠t ƒë·ªÉ t√≠nh ƒë·∫øn v·ªã tr√≠
     * con tr·ªè.
     */
    private void deleteLastChar() {
        String currentText = displayField.getText();
        int cursorPos = displayField.getCaretPosition();

        // ƒê·∫£m b·∫£o cursorPos kh√¥ng v∆∞·ª£t qu√° ƒë·ªô d√†i chu·ªói
        cursorPos = Math.min(cursorPos, currentText.length());

        // Lu√¥n ƒë·∫£m b·∫£o cho ph√©p ch·ªânh s·ª≠a
        displayField.setEditable(true);

        if (currentText.length() > 1) {
            if (cursorPos > 0) {
                // X√≥a k√Ω t·ª± tr∆∞·ªõc con tr·ªè
                String newText = currentText.substring(0, cursorPos - 1)
                        + currentText.substring(cursorPos);
                displayField.setText(newText);

                // ƒê·∫£m b·∫£o v·ªã tr√≠ con tr·ªè kh√¥ng b·ªã √¢m
                int newPos = Math.max(0, cursorPos - 1);
                displayField.setCaretPosition(newPos);

                // ƒê·∫£m b·∫£o con tr·ªè hi·ªÉn th·ªã v√† nh·∫•p nh√°y
                displayField.getCaret().setVisible(true);
            }
        } else {
            displayField.setText("0");
            displayField.setCaretPosition(1);
        }

        // Y√™u c·∫ßu focus v√† ƒë·∫£m b·∫£o th·ª±c hi·ªán sau khi UI c·∫≠p nh·∫≠t
        SwingUtilities.invokeLater(() -> {
            displayField.requestFocusInWindow();
        });
    }

    /**
     * X√≥a m·ª•c nh·∫≠p hi·ªán t·∫°i m√† kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn ph·∫ßn c√≤n l·∫°i c·ªßa bi·ªÉu th·ª©c.
     * Ch·ª©c nƒÉng n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng cho n√∫t "CE" (Clear Entry).
     */
    private void clearEntry() {
        String currentText = displayField.getText();

        // N·∫øu m·ªôt ph√©p t√≠nh v·ª´a ƒë∆∞·ª£c th·ª±c hi·ªán xong, x√≥a t·∫•t c·∫£
        if (calculationDone) {
            displayField.setText("0");
            calculationDone = false;
            return;
        }

        // T√¨m to√°n t·ª≠ cu·ªëi c√πng trong bi·ªÉu th·ª©c
        int lastOperatorIndex = -1;
        for (int i = currentText.length() - 1; i >= 0; i--) {
            char c = currentText.charAt(i);
            if (c == '+' || c == '-' || c == '*' || c == '/' || c == '^' || c == '‚àö') {
                lastOperatorIndex = i;
                break;
            }
        }

        if (lastOperatorIndex == -1) {
            // Kh√¥ng t√¨m th·∫•y to√°n t·ª≠, x√≥a t·∫•t c·∫£
            displayField.setText("0");
        } else {
            // X√≥a ch·ªâ ph·∫ßn sau to√°n t·ª≠ cu·ªëi c√πng
            displayField.setText(currentText.substring(0, lastOperatorIndex + 1));
        }
    }

    /**
     * Di chuy·ªÉn con tr·ªè v·ªÅ ph√≠a tr∆∞·ªõc trong tr∆∞·ªùng hi·ªÉn th·ªã. Ch·ª©c nƒÉng n√†y ƒë∆∞·ª£c
     * s·ª≠ d·ª•ng cho n√∫t "‚Üí".
     */
    private void moveCursorForward() {
        // Lu√¥n ƒë·∫£m b·∫£o cho ph√©p ch·ªânh s·ª≠a 
        displayField.setEditable(true);
        int position = displayField.getCaretPosition();

        // Di chuy·ªÉn con tr·ªè v·ªÅ ph√≠a tr∆∞·ªõc n·∫øu ch∆∞a ·ªü cu·ªëi
        if (position < displayField.getText().length()) {
            displayField.setCaretPosition(position + 1);

            // ƒê·∫£m b·∫£o con tr·ªè hi·ªÉn th·ªã v√† nh·∫•p nh√°y
            displayField.getCaret().setVisible(true);
        }

        // Y√™u c·∫ßu focus v√† ƒë·∫£m b·∫£o th·ª±c hi·ªán sau khi UI c·∫≠p nh·∫≠t
        SwingUtilities.invokeLater(() -> {
            displayField.requestFocusInWindow();
        });
    }

    /**
     * Di chuy·ªÉn con tr·ªè v·ªÅ ph√≠a tr√°i trong tr∆∞·ªùng hi·ªÉn th·ªã. Ch·ª©c nƒÉng n√†y ƒë∆∞·ª£c
     * s·ª≠ d·ª•ng cho n√∫t "‚Üê".
     */
    private void moveCaretLeft() {
        // Lu√¥n ƒë·∫£m b·∫£o cho ph√©p ch·ªânh s·ª≠a
        displayField.setEditable(true);
        int position = displayField.getCaretPosition();

        // Di chuy·ªÉn con tr·ªè v·ªÅ ph√≠a tr√°i n·∫øu ch∆∞a ·ªü ƒë·∫ßu
        if (position > 0) {
            displayField.setCaretPosition(position - 1);

            // ƒê·∫£m b·∫£o con tr·ªè hi·ªÉn th·ªã v√† nh·∫•p nh√°y
            displayField.getCaret().setVisible(true);
        }

        // Y√™u c·∫ßu focus v√† ƒë·∫£m b·∫£o th·ª±c hi·ªán sau khi UI c·∫≠p nh·∫≠t
        SwingUtilities.invokeLater(() -> {
            displayField.requestFocusInWindow();
        });
    }
    
    private void moveCaretRight() {
        int pos = displayField.getCaretPosition();
        if (pos < displayField.getText().length()) {
            displayField.requestFocusInWindow();
            displayField.setCaretPosition(pos + 1);
        }
    }
    
    private void clearCurrentEntry() {
        String text = displayField.getText();
        int pos = displayField.getCaretPosition();
        int left = pos - 1;

        while (left >= 0 && (Character.isDigit(text.charAt(left)) || text.charAt(left) == '.')) {
            left--;
        }

        int right = pos;
        while (right < text.length() && (Character.isDigit(text.charAt(right)) || text.charAt(right) == '.')) {
            right++;
        }

        String newText = text.substring(0, left + 1) + text.substring(right);
        displayField.setText(newText.isEmpty() ? "0" : newText);
        displayField.setCaretPosition(Math.min(left + 1, newText.length()));
        displayField.requestFocusInWindow();
    }
    private void toggleSign() {
        String currentText = displayField.getText();
        if (currentText.equals("0") || currentText.isEmpty()) {
            displayField.setText("-");
        } else if (currentText.startsWith("-")) {
            displayField.setText(currentText.substring(1));
        } else {
            displayField.setText("-" + currentText);
        }
    }
    

    /**
     * Th·ª±c hi·ªán ph√©p t√≠nh b·∫±ng c√°ch ƒë·ªçc bi·ªÉu th·ª©c t·ª´ m√†n h√¨nh, ƒë√°nh gi√° n√≥, sau
     * ƒë√≥ c·∫≠p nh·∫≠t m√†n h√¨nh v√† l·ªãch s·ª≠.
     */
    private void performCalculation() {
        try {
            String expression = displayField.getText(); // L·∫•y bi·ªÉu th·ª©c t·ª´ m√†n h√¨nh
            if (expression.isEmpty()) {
                return;
            }
            double result = evaluateExpression(expression); // ƒê√°nh gi√° bi·ªÉu th·ª©c b·∫±ng b·ªô ph√¢n t√≠ch c√∫ ph√°p
            String resultStr = formatResult(result);        // ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ ƒë·ªÉ hi·ªÉn th·ªã
            String historyLine = expression + " = " + resultStr;
            historyModel.addElement(historyLine); // Th√™m ph√©p t√≠nh v√†o l·ªãch s·ª≠ (b·ªô nh·ªõ)
            displayField.setText(resultStr);   // C·∫≠p nh·∫≠t m√†n h√¨nh v·ªõi k·∫øt qu·∫£
            calculationDone = true;            // ƒê√°nh d·∫•u r·∫±ng m·ªôt ph√©p t√≠nh ƒë√£ ho√†n th√†nh
            fullHistory.add(historyLine);
        } catch (ArithmeticException ex) {
            // X·ª≠ l√Ω chia cho kh√¥ng
            if ("Divide by zero".equals(ex.getMessage())) {
                JOptionPane.showMessageDialog(mainFrame,
                        "Kh√¥ng th·ªÉ chia cho s·ªë kh√¥ng!",
                        "L·ªói",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(mainFrame,
                        "L·ªói s·ªë h·ªçc: " + ex.getMessage(),
                        "L·ªói",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (RuntimeException ex) {
            // X·ª≠ l√Ω b·∫•t k·ª≥ l·ªói n√†o kh√°c (nh∆∞ bi·ªÉu th·ª©c kh√¥ng h·ª£p l·ªá)
            JOptionPane.showMessageDialog(mainFrame,
                    "Bi·ªÉu th·ª©c kh√¥ng h·ª£p l·ªá!: " + ex.getMessage(),
                    "L·ªói",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * ƒê√°nh gi√° m·ªôt bi·ªÉu th·ª©c to√°n h·ªçc b·∫±ng b·ªô ph√¢n t√≠ch c√∫ ph√°p gi·∫£m ƒë·ªá quy.
     *
     * @param expression Bi·ªÉu th·ª©c d∆∞·ªõi d·∫°ng chu·ªói
     * @return K·∫øt qu·∫£ c·ªßa vi·ªác ƒë√°nh gi√°
     */
    private double evaluateExpression(String expression) {
        ExpressionParser parser = new ExpressionParser(expression);
        return parser.parse();
    }

    /**
     * ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ sao cho n·∫øu k·∫øt qu·∫£ l√† m·ªôt s·ªë nguy√™n, ph·∫ßn th·∫≠p ph√¢n
     * kh√¥ng ƒë∆∞·ª£c hi·ªÉn th·ªã.
     *
     * @param value Gi√° tr·ªã ƒë·ªÉ ƒë·ªãnh d·∫°ng
     * @return Bi·ªÉu di·ªÖn chu·ªói c·ªßa k·∫øt qu·∫£
     */
    private String formatResult(double value) {
        if (value == (long) value) {
            return String.valueOf((long) value);
        } else {
            return String.valueOf(value);
        }
    }
    

    /**
     * ExpressionParser s·ª≠ d·ª•ng ph√¢n t√≠ch c√∫ ph√°p gi·∫£m ƒë·ªá quy ƒë·ªÉ ƒë√°nh gi√° c√°c
     * bi·ªÉu th·ª©c to√°n h·ªçc. H·ªó tr·ª£ c√°c to√°n t·ª≠: +, -, *, /, l≈©y th·ª´a (^), cƒÉn b·∫≠c
     * hai (‚àö), v√† ph·∫ßn trƒÉm (%).
     */
    private class ExpressionParser {

        private final String input; // Bi·ªÉu th·ª©c ƒë·∫ßu v√†o
        private int pos = -1;       // V·ªã tr√≠ hi·ªán t·∫°i trong chu·ªói ƒë·∫ßu v√†o
        private int currentChar;    // K√Ω t·ª± hi·ªán t·∫°i d∆∞·ªõi d·∫°ng gi√° tr·ªã ASCII

        /**
         * Constructor: Kh·ªüi t·∫°o b·ªô ph√¢n t√≠ch v·ªõi bi·ªÉu th·ª©c ƒë√£ cho.
         *
         * @param input Bi·ªÉu th·ª©c to√°n h·ªçc d∆∞·ªõi d·∫°ng chu·ªói
         */
        public ExpressionParser(String input) {
            this.input = input;
            nextChar(); // Di chuy·ªÉn ƒë·∫øn k√Ω t·ª± ƒë·∫ßu ti√™n
        }

        /**
         * Ti·∫øn ƒë·∫øn k√Ω t·ª± ti·∫øp theo trong ƒë·∫ßu v√†o.
         */
        private void nextChar() {
            pos++;
            currentChar = (pos < input.length()) ? input.charAt(pos) : -1;
        }

        /**
         * Ti√™u th·ª• k√Ω t·ª± hi·ªán t·∫°i n·∫øu n√≥ kh·ªõp v·ªõi k√Ω t·ª± mong ƒë·ª£i.
         *
         * @param charToEat K√Ω t·ª± m√† ch√∫ng ta mong ƒë·ª£i
         * @return true n·∫øu k√Ω t·ª± ƒë√£ ƒë∆∞·ª£c ti√™u th·ª•, false n·∫øu ng∆∞·ª£c l·∫°i
         */
        private boolean eat(int charToEat) {
            while (currentChar == ' ') {
                nextChar();
            }
            if (currentChar == charToEat) {
                nextChar();
                return true;
            }
            return false;
        }

        /**
         * Ph√¢n t√≠ch bi·ªÉu th·ª©c ƒë·∫ßy ƒë·ªß v√† tr·∫£ v·ªÅ gi√° tr·ªã c·ªßa n√≥.
         *
         * @return K·∫øt qu·∫£ ƒë√°nh gi√° c·ªßa bi·ªÉu th·ª©c
         */
        public double parse() {
            double result = parseExpression();
            if (pos < input.length()) {
                throw new RuntimeException("K√Ω t·ª± kh√¥ng mong ƒë·ª£i: " + (char) currentChar);
            }
            return result;
        }

        /**
         * Ph√¢n t√≠ch m·ªôt bi·ªÉu th·ª©c. Bi·ªÉu th·ª©c = S·ªë h·∫°ng { ('+' | '-') S·ªë h·∫°ng }
         *
         * @return Gi√° tr·ªã ƒë√°nh gi√° c·ªßa bi·ªÉu th·ª©c
         */
        private double parseExpression() {
            double result = parseTerm();
            while (true) {
                if (eat('+')) {
                    result += parseTerm(); // Ph√©p c·ªông
                } else if (eat('-')) {
                    result -= parseTerm(); // Ph√©p tr·ª´
                } else {
                    return result;
                }
            }
        }

        /**
         * Ph√¢n t√≠ch m·ªôt s·ªë h·∫°ng. S·ªë h·∫°ng = Nh√¢n t·ª≠ { ('*' | '/') Nh√¢n t·ª≠ }
         *
         * @return Gi√° tr·ªã ƒë√°nh gi√° c·ªßa s·ªë h·∫°ng
         */
        private double parseTerm() {
            double result = parseFactor();
            while (true) {
                if (eat('*')) {
                    result *= parseFactor(); // Ph√©p nh√¢n
                } else if (eat('/')) {
                    double denominator = parseFactor(); // Ph√©p chia
                    if (denominator == 0.0) {
                        throw new ArithmeticException("Divide by zero");
                    }
                    result /= denominator;
                } else {
                    return result;
                }
            }
        }

        /**
         * Ph√¢n t√≠ch m·ªôt nh√¢n t·ª≠. Nh√¢n t·ª≠ = (to√°n t·ª≠ m·ªôt ng√¥i) { '^' Nh√¢n t·ª≠ }
         * H·ªó tr·ª£ s·ªë, d·∫•u ngo·∫∑c ƒë∆°n, cƒÉn b·∫≠c hai (‚àö), v√† ph·∫ßn trƒÉm (%).
         *
         * @return Gi√° tr·ªã ƒë√°nh gi√° c·ªßa nh√¢n t·ª≠
         */
        private double parseFactor() {
            // X·ª≠ l√Ω d·∫•u c·ªông v√† tr·ª´ m·ªôt ng√¥i
            if (eat('+')) {
                return parseFactor();
            }
            if (eat('-')) {
                return -parseFactor();
            }

            double result;
            int startPos = pos; // Ghi nh·ªõ v·ªã tr√≠ b·∫Øt ƒë·∫ßu cho c√°c s·ªë

         // H√†m l∆∞·ª£ng gi√°c & logarit
            String func = null;
            if (Character.isLetter(currentChar)) {
                int startFunc = pos;
                while (Character.isLetter(currentChar)) nextChar();
                func = input.substring(startFunc, pos);
            }

            if (func != null) {
                if (!eat('(')) throw new RuntimeException("Missing '(' after " + func);
                double arg = parseExpression();
                if (!eat(')')) throw new RuntimeException("Missing ')'");

                if (isDegreeMode && (func.equals("sin") || func.equals("cos") || func.equals("tan") || func.equals("cot"))) {
                    arg = Math.toRadians(arg);
                }

                switch (func) {
                    case "sin" -> result = Math.sin(arg);
                    case "cos" -> result = Math.cos(arg);
                    case "tan" -> result = Math.tan(arg);
                    case "cot" -> result = 1.0 / Math.tan(arg);
                    case "log" -> result = Math.log10(arg);
                    case "ln" -> result = Math.log(arg);
                    default -> throw new RuntimeException("Unknown function: " + func);
                }
                return result;
            }
            // X·ª≠ l√Ω cƒÉn b·∫≠c hai: k√Ω hi·ªáu '‚àö'
            if (eat('‚àö')) {
                double value;
                if (eat('(')) {
                    value = parseExpression();
                    if (!eat(')')) {
                        throw new RuntimeException("Thi·∫øu ')' sau cƒÉn b·∫≠c hai");
                    }
                } else {
                    value = parseFactor();
                }
                if (value < 0) {
                    throw new ArithmeticException("Kh√¥ng th·ªÉ t√≠nh cƒÉn b·∫≠c hai c·ªßa s·ªë √¢m: ‚àö" + value);
                }
                result = Math.sqrt(value);
                if (eat('%')) {
                    result /= 100.0;
                }
            } // X·ª≠ l√Ω d·∫•u ngo·∫∑c ƒë∆°n
            else if (eat('(')) {
                result = parseExpression();
                if (!eat(')')) {
                    throw new RuntimeException("Thi·∫øu ')'");
                }
            } // X·ª≠ l√Ω s·ªë
            else if ((currentChar >= '0' && currentChar <= '9') || currentChar == '.') {
                boolean hasDot = false;
                while ((currentChar >= '0' && currentChar <= '9') || currentChar == '.') {
                    if (currentChar == '.') {
                        if (hasDot) throw new RuntimeException("S·ªë kh√¥ng h·ª£p l·ªá: nhi·ªÅu d·∫•u '.' li√™n ti·∫øp");
                        hasDot = true;
                    }
                    nextChar();
                }
                String numberStr = input.substring(startPos, pos);
                if (numberStr.equals(".") || numberStr.isEmpty()) {
                    throw new RuntimeException("S·ªë kh√¥ng h·ª£p l·ªá: " + numberStr);
                }
                result = Double.parseDouble(numberStr);
                if (eat('%')) {
                    result /= 100.0;
                }
            } else {
                throw new RuntimeException("K√Ω t·ª± kh√¥ng mong ƒë·ª£i: " + (char) currentChar);
            }

            // X·ª≠ l√Ω l≈©y th·ª´a '^'
            if (eat('^')) {
                double exponent = parseFactor();
                if (result < 0 && exponent != Math.floor(exponent)) {
                    throw new ArithmeticException("Kh√¥ng h·ªó tr·ª£ l≈©y th·ª´a s·ªë √¢m v·ªõi s·ªë m≈© kh√¥ng nguy√™n: " + result + "^" + exponent);
                }
                result = Math.pow(result, exponent);
            }
            if (eat('!')) {
                if (result < 0 || result != Math.floor(result)) throw new RuntimeException("Giai th·ª´a kh√¥ng h·ª£p l·ªá");
                result = factorial((int) result);
            }
            return result;
        }
        private double factorial(int n) {
            double res = 1;
            for (int i = 2; i <= n; i++) res *= i;
            return res;
        }
    }

    // Custom renderer cho t·ª´ng d√≤ng l·ªãch s·ª≠ v·ªõi n√∫t X
    private class HistoryCellRenderer extends JPanel implements ListCellRenderer<String> {
        JLabel label;
        JButton deleteButton;

        public HistoryCellRenderer() {
            setLayout(new BorderLayout());
            label = new JLabel();
            deleteButton = new JButton("X");
            deleteButton.setMargin(new Insets(2, 6, 2, 6));
            deleteButton.setFocusable(false);
            deleteButton.setForeground(Color.RED);
            add(label, BorderLayout.CENTER);
            add(deleteButton, BorderLayout.EAST);
        }

        @Override
        public Component getListCellRendererComponent(JList<? extends String> list, String value, int index,
                                                      boolean isSelected, boolean cellHasFocus) {
            label.setText(value);
            setBackground(isSelected ? list.getSelectionBackground() : list.getBackground());
            label.setForeground(isSelected ? list.getSelectionForeground() : list.getForeground());
            return this;
        }
    }

    public static void main(String[] args) {
        MySimpleCalculator c = new MySimpleCalculator();
    }
}
